Information is stored as as a User entity.

CRC Cards

***
User (Value object/POJO)

Responsibilities
Knows username
Knows password
***
UserToken (Value object/POJO)

Responsibilities
Knows token (some kind of encrypted hash?)
***
Authenticator

Responsibilites
Logs a user in
Takes a user and checks it against a repository

Collaborators
UserService
SessionService
***
UserService

Responsibilities
Communicate with repository to CRUD
- Get User login details (LoD)

Collaborators
UserRepository

***
UserRepository

Responsibilities
Unique usernames
User Persistence within some kind of memory/db

Collaborators
Database
***
SessionService

Responsibilities
Tracks logged in users


Sequence Diagram
Goal: Authenticate login
Actor -> POST /login(loginAttempt) : Controller -> verifyLogin(loginAttempt) : Authenticator -> getUser(username) : UserService -> (Additional UserRepository step)
                                                -> createSession(user) : SessionService
         success? return cookie                 <-

Goal: Access page when logged in
Actor -> view /protected route : Controller -> isLoggedIn(token) : SessionService
         success? return view               <-


loginAttempt = {
  username
  password
}
